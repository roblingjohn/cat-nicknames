{"version":3,"sources":["components/Display.jsx","components/Choose.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","state","adj","noun","catData","props","location","adjWord","nounWord","adjArray","nounArray","maleNounArray","femaleNounArray","largeAdjArray","largeNounArray","selectName","adjNumber","Math","floor","random","length","nounNumber","setState","this","sex","tempArray","concat","size","console","log","className","onClick","to","Component","Choose","isChosen","handleSubmit","event","preventDefault","target","value","pathname","onSubmit","htmlFor","id","name","class","App","exact","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.074606e1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Display extends Component {\n  state = {\n    adj: \"\",\n    noun: \"\",\n    catData: this.props.location.state.catData,\n  };\n\n  adjWord = \"\";\n\n  nounWord = \"\";\n\n  componentDidMount() {\n    if (this.props.location.state.catData.sex === \"male\") {\n      let tempArray = this.nounArray.concat(this.maleNounArray);\n      this.nounArray = tempArray;\n    } else if (this.props.location.state.catData.sex === \"female\") {\n      let tempArray = this.nounArray.concat(this.femaleNounArray);\n      this.nounArray = tempArray;\n    }\n    if (this.props.location.state.catData.size === \"large\") {\n      let tempArray = this.nounArray.concat(this.largeNounArray);\n      this.nounArray = tempArray;\n      tempArray = this.adjArray.concat(this.largeAdjArray);\n      this.adjArray = tempArray;\n    }\n    this.selectName();\n    console.log(this.props.location.state.catData);\n  }\n\n  adjArray = [\n    \"TINY\",\n    \"BABY\",\n    \"STINKY\",\n    \"CUTIE\",\n    \"LITTLE\",\n    \"FLUFFY\",\n    \"SWEET\",\n    \"SILLY\",\n    \"SLEEPY\",\n    \"CUDDLE\",\n    \"SASSY\",\n    \"SLINKY\",\n    \"FUZZY\",\n  ];\n\n  nounArray = [\n    \"BEAN\",\n    \"KITTY\",\n    \"BABE\",\n    \"BUTT\",\n    \"BIT\",\n    \"POTATO\",\n    \"MUFFIN\",\n    \"ANGEL\",\n    \"PIE\",\n    \"FLOOF\",\n    \"BALL\",\n    \"MARSHMALLOW\",\n    \"CUP\",\n    \"LOAF\",\n  ];\n\n  maleNounArray = [\"BOY\", \"MAN\", \"GENTLEMAN\"];\n\n  femaleNounArray = [\"GIRL\", \"LADY\"];\n\n  largeAdjArray = [\"CHONKY\", \"BIG\", \"TUBBY\"];\n  largeNounArray = [\"CHONK\", \"TUB\"];\n\n  selectName = () => {\n    let adjNumber = Math.floor(Math.random() * this.adjArray.length);\n    let nounNumber = Math.floor(Math.random() * this.nounArray.length);\n    this.adjWord = this.adjArray[adjNumber];\n    this.nounWord = this.nounArray[nounNumber];\n    this.setState({\n      adj: this.adjWord,\n      noun: this.nounWord,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>call your cat</h3>\n        <h1>{this.state.adj}</h1>\n        <h1>{this.state.noun}</h1>\n        <button className=\"btn\" onClick={this.selectName}>\n          NEW NICKNAME\n        </button>\n        <br />\n        <Link to=\"/\">\n          <button className=\"btn\">NEW CAT INFO</button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Choose extends Component {\n  state = {\n    sex: \"none\",\n    size: \"none\",\n    isChosen: false,\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(event.target.sex.value);\n    console.log(event.target.size.value);\n    this.setState({\n      sex: event.target.sex.value,\n      size: event.target.size.value,\n      isChosen: true,\n    });\n  };\n\n  render() {\n    if (this.state.isChosen === true) {\n      return (\n        <Redirect\n          to={{\n            pathname: \"/nickname\",\n            state: {\n              catData: {\n                sex: this.state.sex,\n                size: this.state.size,\n              },\n            },\n          }}\n        />\n      );\n    }\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <h3>\n            <label htmlFor=\"sex\">What sex is your cat?</label>\n            <select id=\"sex\" name=\"sex\">\n              <option value=\"none\">---</option>\n              <option value=\"male\">Male</option>\n              <option value=\"female\">Female</option>\n            </select>\n          </h3>\n          <br />\n          <h3>\n            <label htmlFor=\"size\">What size is your cat?</label>\n            <select id=\"size\" name=\"size\">\n              <option value=\"none\">---</option>\n              <option value=\"small\">Small</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"large\">Large</option>\n            </select>\n            <br />\n            <button class=\"btn\">GIMME A NICKNAME</button>\n          </h3>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Choose;\n","import React from \"react\";\nimport Display from \"./components/Display\";\nimport Choose from \"./components/Choose\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          {/* <Route exact path=\"./\">\n            <Choose />\n          </Route> */}\n          <Route\n            exact\n            path=\"./nickname\"\n            render={(props) => <Display {...props} />}\n          />\n          <Route path=\"./*\">\n            <Choose />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}